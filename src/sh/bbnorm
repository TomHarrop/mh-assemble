#!/usr/bin/env bash

printf "[ %s: Digital normalization of libraries ]\n" \
    "$(date)"

# shellcheck disable=SC1091
source "src/sh/bash_header"
# shellcheck disable=SC1091
source "src/sh/io_parser"

# make outdir
outdir="$(dirname "${output_fq}")"
if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
fi

# build command
java_ram=$((ram_limit/1000000000))"g"
bn="$( basename "${output_fq}" .fastq.gz )"
cmd=( bin/bbmap/bbnorm.sh threads="${max_cpus}" "-Xmx${java_ram}"
      in="${input_fq}" out="${output_fq}"
      target=57 min=5 prefilter ecc
      khist="${outdir}/${bn}_hist_before.txt"
      khistout="${outdir}/${bn}_hist_after.txt"
      peaks="${outdir}/${bn}_peaks.txt" )

shopt -s extglob
printf "Final command line: "
printf "%s " "${cmd[@]//+([[:blank:]])/ }"
printf "\n"
shopt -u extglob

# run bbnorm
log_file="${outdir}/${bn}_bbnorm.log.txt"
srun --ntasks=1 --cpus-per-task="${max_cpus}" --exclusive \
    --output="${log_file}" "${cmd[@]}" &

printf "[ %s: Waiting for bbnorm to finish ]\n" "$(date)"
FAIL=0
fail_wait

# log metadata
metadata_file="${outdir}/${bn}.METADATA.csv"

printf "[ %s: Logging metadata ]\n" "$(date)"
printf "metadata_file: %s\n" "${metadata_file}"
cat <<- _EOF_ > "${metadata_file}"
    Script,${0}
    branch,$(git rev-parse --abbrev-ref HEAD)
    hash,$(git rev-parse HEAD)
    date,$(date +%F)
    bbnorm revision,$(bin/bbmap/bbnorm.sh 2>&1 | sed '3q;d')
    output,${outdir}
_EOF_

printf "[ %s: Done ]\n" "$(date)"

exit 0
