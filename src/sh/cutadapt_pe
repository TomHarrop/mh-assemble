#!/usr/bin/env bash

printf "[ %s: Run cutadapt on paired-end libraries ]\n" \
    "$(date)"

# shellcheck disable=SC1091
source "src/sh/bash_header"
# shellcheck disable=SC1091
source "src/sh/io_parser"

# make outdir
outdir="$(dirname "${output_fq}")"
if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
fi

# parameters
adaptor_fwd='TruSeq_indexed_adaptor=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC'
adaptor_rev='RC_TruSeq_Universal_Adapter=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT'
trim_qualities=30
minimum_length=50

# pair the files
for fq_file in "${input_fq[@]}"; do
    bn="$(basename "${fq_file}" .fastq.gz)"
    if grep -q "_R1" <<< "${bn}"; then
        fq_r1="${fq_file}"
    elif grep -q "_R2" <<< "${bn}"; then
        fq_r2="${fq_file}"
    fi
done
for fq_file in "${output_fq[@]}"; do
    bn="$(basename "${fq_file}" .fastq.gz)"
    if grep -q "_R1" <<< "${bn}"; then
        ofq_r1="${fq_file}"
    elif grep -q "_R2" <<< "${bn}"; then
        ofq_r2="${fq_file}"
    fi
done

printf "       fq_r1: %s\n       fq_r2: %s\n" "${fq_r1}" "${fq_r2}"
printf "      ofq_r1: %s\n      ofq_r2: %s\n" "${ofq_r1}" "${ofq_r2}"

# build the command
cmd=( cutadapt -a "${adaptor_fwd}" -A "${adaptor_rev}"
        --quality-cutoff="${trim_qualities}"
        --minimum-length="${minimum_length}"
        --output="${ofq_r1}" --paired-output="${ofq_r2}"
        "${fq_r1}" "${fq_r2}" )

shopt -s extglob
printf "Final command line: "
printf "%s " "${cmd[@]//+([[:blank:]])/ }"
printf "\n"
shopt -u extglob

# run job
bn=$(basename "${ofq_r1}" _R1_trimmed.fastq.gz)
log_file="${outdir}/${bn}_cutadapt.log.txt"
srun --ntasks=1 --cpus-per-task="${max_cpus}" --exclusive \
    --job-name="${bn}" --output="${log_file}" "${cmd[@]}" &
printf "[ %s: Waiting for cutadapt to finish ]\n" "$(date)"
FAIL=0
fail_wait

# log metadata
metadata_file="${outdir}/${bn}.METADATA.csv"

printf "[ %s: Logging metadata ]\n" "$(date)"
printf "metadata_file: %s\n" "${metadata_file}"
cat <<- _EOF_ > "${metadata_file}"
    Script,${0}
    branch,$(git rev-parse --abbrev-ref HEAD)
    hash,$(git rev-parse HEAD)
    date,$(date +%F)
    cutadapt version,$(cutadapt --version)
    output,${outdir}
_EOF_

printf "[ %s: Done ]\n" "$(date)"

exit 0
